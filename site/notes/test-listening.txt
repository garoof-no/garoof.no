# bla bla bla
:todo
:template lua

``` repl
local xml = parse([[
<root>
  <header>blep</header>
  <thing>
    <name>foo</name>
    <value>bar</value>
  </thing>
  <thing>
    <name>beep</name>
    <value>boop</value>
  </thing>
</root>
]])

runtests(
  function()
    assertEq("blep", xml:element("header"):textcontent())
  end,
  function()
    local l = xml:elementlist("thing")
    assertEq(2, #l)
    assertEq("foo", l[1]:element("name"):textcontent())
    assertEq("bar", l[1]:element("value"):textcontent())
    assertEq("beep", l[2]:element("name"):textcontent())
    assertEq("boop", l[2]:element("value"):textcontent())
  end
)

```

----

XML framework:

``` run
local function textcontent(t)
  local function halp(t, res)
    for _, v in ipairs(t) do
      if type(v) == "string" then
        table.insert(res, v)
      else
        table.insert(res, "<" .. v.name .. ">")
        halp(v, res)
        table.insert(res, "</" .. v.name .. ">")
      end
    end
  end
  local res = {}
  halp(t, res)
  return table.concat(res)
end

local function elements(t, named)
  local it, st, start = ipairs(t)
  local function halp(t, k)
    local v
    repeat k, v = it(t, k)
    until v == nil or (type(v) == "table" and ((not named) or named == v.name))
    return k, v
  end
  return halp, st, start
end

local function elementlist(t, named)
  local res = {}
  for k, v in elements(t, named) do table.insert(res, v) end
  return res
end

local function element(t, named)
  local res = elementlist(t, named)
  assert(
    #res == 1,
    "found " .. #res .. " elements" .. (named and " named " .. named or ""))
  return res[1]
end

local xml
xml = setmetatable(
  {
    __index = {
      textcontent = textcontent,
      elements = elements,
      elementlist = elementlist,
      element = element
    }
  },
  { __call = function(_, t) return setmetatable(t, xml) end })

local unescapes = { ["&lt;"] = "<", ["&gt;"] = ">", ["&amp;"] = "&" }
function unescape(s)
  local res = s:gsub("&%a?%a?%a?;", unescapes)
  return res
end

local content

local function element(str, i)
  local startname, i2 = str:match("^<([^<>]+)>()", i)
  assert(startname, 'SYNTAX ERROR: "' .. str:sub(i) .. '"')
  local res, i3 = content(str, i2)
  local endname, i4 = str:match("^</([^<>]+)>()", i3)
  assert(endname, 'SYNTAX ERROR: "' .. str:sub(i3) .. '"')
  assert(startname == endname, endname .. " does not match " .. startname)
  res.name = unescape(startname)
  return res, i4
end

function content(str, i)
  local res = {}
  local x, a, b
  while true do
    x, i, a, b = str:match("^([^<>]*)()(.?)(.?)", i)
    if x ~= "" then table.insert(res, unescape(x)) end
    if a == "<" and b ~= "/" then
      x, i = element(str, i)
      table.insert(res, x)
    else
      return xml(res), i
    end
  end
end

function parse(str)
  local res, i = content(str, 1)
  if i <= #str then
    error('SYNTAX ERROR: "' .. str:sub(i) .. '"')
  end
  local element
  for _, v in ipairs(res) do
    if type(v) == "string" then
      assert(v:match("^%s*$"), 'top-level text! >:( "' .. v .. '"')
    else
      assert(not element, "more than one top-level element :(")
      element = v
    end
  end
  assert(element, "no top-level element :(")
  return element
end
```

----

Testing framework:

``` run
local escapechar = {
  ["<"] = "&lt;",
  [">"] = "&gt;",
  ['"'] = "&quot;",
  ["'"] =  "&apos;",
  ["&"] = "&amp;"
}

local function escape(str)
  local res, _ = (str or ""):gsub("[<>\"'&]", escapechar)
  return res
end

function runtests(...)
  local str = { '<p>' }
  local passes, failures = 0, 0
  for i, f in ipairs({...}) do
    local success, res = pcall(f)
    if success then
      passes = passes + 1
    else
      failures = failures + 1
      table.insert(str, 'test ' .. i .. ' failed: ')
      table.insert(str, escape(tostring(res)) .. '<br>')
    end
  end
  table.insert(str, '<span style="background-color:')
  if failures == 0 then
    table.insert(str, 'green;">this is a green bar ')
  else
    table.insert(str, 'red;">this is a red bar ')
  end
  table.insert(str,  '(' .. passes .. ' tests passed. ')
  table.insert(str,  failures .. ' tests failed)</span></p>')
  web.html(table.concat(str))
end

function assertEq(e, a)
  if e ~= a then
    error("expected: " .. tostring(e).. ", actual: " .. tostring(a))
  end
end
```

